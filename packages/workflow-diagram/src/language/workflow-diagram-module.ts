import {
   AstNode,
   createDefaultModule, createDefaultSharedModule, DefaultDocumentBuilder, DefaultLangiumDocuments,
   DefaultServiceRegistry, DefaultSharedModuleContext, inject,
   JsonSerializer,
   LangiumServices, LangiumSharedServices, Module, PartialLangiumServices, PartialLangiumSharedServices, ServiceRegistry
} from 'langium';
import { TextDocument } from 'vscode-languageserver-textdocument';
import { URI } from 'vscode-uri';
import { AddedSharedModelServices } from '../extension/model-server/model-module';
import { ModelService } from '../extension/model-server/model-service';
import { OpenTextDocumentManager } from '../extension/model-server/open-text-document-manager';
import { OpenableTextDocuments } from '../extension/model-server/openable-text-documents';
import { Serializer } from '../extension/model-server/serializer';
import { WorkflowDiagramGeneratedModule, WorkflowDiagramGeneratedSharedModule } from './generated/module';
import { WorkflowDiagramWorkspaceManager } from './workflow-diagram-workspace-manager';
import { WorkflowDiagramScopeComputation } from './workflow-diagram-scope';




/***************************
 * Shared Module
 ***************************/
export interface ExtendedLangiumServices extends LangiumServices {
    serializer: {
       JsonSerializer: JsonSerializer;
       Serializer: Serializer<AstNode>;
    };
 }
 
 export class ExtendedServiceRegistry extends DefaultServiceRegistry {
    override register(language: ExtendedLangiumServices): void {
       super.register(language);
    }
 
    override getServices(uri: URI): ExtendedLangiumServices {
       return super.getServices(uri) as ExtendedLangiumServices;
    }
 }
 
 export interface ExtendedServiceRegistry extends ServiceRegistry {
    register(language: ExtendedLangiumServices): void;
    getServices(uri: URI): ExtendedLangiumServices;
 }

/**
 * Declaration of custom services - add your own service classes here.
 */
export type WorkflowDiagramAddedSharedServices = {
    ServiceRegistry: ExtendedServiceRegistry,
    workspace: {
        WorkspaceManager: WorkflowDiagramWorkspaceManager
    }
}


export const WorkflowDiagramSharedServices = Symbol('WorkflowDiagramSharedServices');
export type WorkflowDiagramSharedServices = Omit<LangiumSharedServices, 'ServiceRegistry'> &
    WorkflowDiagramAddedSharedServices &
   AddedSharedModelServices;

export const WorkflowDiagramSharedModule: Module<
   WorkflowDiagramSharedServices,
   PartialLangiumSharedServices & WorkflowDiagramAddedSharedServices & AddedSharedModelServices
> = {
   ServiceRegistry: () => new ExtendedServiceRegistry(),
   workspace: {
      WorkspaceManager: services => new WorkflowDiagramWorkspaceManager(services),
      LangiumDocuments: services => new DefaultLangiumDocuments(services),
      TextDocuments: () => new OpenableTextDocuments(TextDocument),
      TextDocumentManager: services => new OpenTextDocumentManager(services),
      DocumentBuilder: services => new DefaultDocumentBuilder(services)
   },
   model: {
      ModelService: services => new ModelService(services)
   },
};

export interface WorkflowDiagramModuleContext {
    shared: WorkflowDiagramSharedServices
}

export interface WorkflowDiagramAddedServices {
    shared: WorkflowDiagramSharedServices
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type WorkflowDiagramServices = ExtendedLangiumServices & WorkflowDiagramAddedServices
export const WorkflowDiagramServices = Symbol('WorkflowDiagramServices');

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export function createWorkflowDiagramModule(
    context: WorkflowDiagramModuleContext
 ): Module<WorkflowDiagramServices, PartialLangiumServices & WorkflowDiagramAddedServices> {
    return {
        shared: () => context.shared,
        references: {
         ScopeComputation: (services) => new WorkflowDiagramScopeComputation(services)
        }
    }
};




/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createWorkflowDiagramServices(context: DefaultSharedModuleContext): {
    shared: WorkflowDiagramSharedServices;
    WorkflowDiagram: WorkflowDiagramServices;
 } {
    const shared = inject(createDefaultSharedModule(context), WorkflowDiagramGeneratedSharedModule, WorkflowDiagramSharedModule);
    const WorkflowDiagram = inject(createDefaultModule({ shared }), WorkflowDiagramGeneratedModule, createWorkflowDiagramModule({ shared }));
    shared.ServiceRegistry.register(WorkflowDiagram);
    return { shared, WorkflowDiagram };
 }
