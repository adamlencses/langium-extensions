/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Node = ActivityNode | Category | TaskNode;

export const Node = 'Node';

export function isNode(item: unknown): item is Node {
    return reflection.isInstance(item, Node);
}

export type NodeType = 'decision' | 'fork' | 'join' | 'merge';

export type TaskType = 'automated' | 'manual';

export interface ActivityNode extends AstNode {
    readonly $container: Category | Model;
    readonly $type: 'ActivityNode';
    name: string
    nodeType: NodeType
}

export const ActivityNode = 'ActivityNode';

export function isActivityNode(item: unknown): item is ActivityNode {
    return reflection.isInstance(item, ActivityNode);
}

export interface Category extends AstNode {
    readonly $container: Category | Model;
    readonly $type: 'Category';
    children: Array<Node>
    name: string
}

export const Category = 'Category';

export function isCategory(item: unknown): item is Category {
    return reflection.isInstance(item, Category);
}

export interface Edge extends AstNode {
    readonly $container: Model;
    readonly $type: 'Edge' | 'WeigtedEdge';
    source: Reference<Node>
    target: Reference<Node>
}

export const Edge = 'Edge';

export function isEdge(item: unknown): item is Edge {
    return reflection.isInstance(item, Edge);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    edges: Array<Edge>
    nodes: Array<Node>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface TaskNode extends AstNode {
    readonly $container: Category | Model;
    readonly $type: 'TaskNode';
    duration: number
    expanded: boolean
    name: string
    reference?: string
    taskType: TaskType
}

export const TaskNode = 'TaskNode';

export function isTaskNode(item: unknown): item is TaskNode {
    return reflection.isInstance(item, TaskNode);
}

export interface WeigtedEdge extends Edge {
    readonly $container: Model;
    readonly $type: 'WeigtedEdge';
    probability: string
    source: Reference<Node>
    target: Reference<Node>
}

export const WeigtedEdge = 'WeigtedEdge';

export function isWeigtedEdge(item: unknown): item is WeigtedEdge {
    return reflection.isInstance(item, WeigtedEdge);
}

export interface WorkflowAstType {
    ActivityNode: ActivityNode
    Category: Category
    Edge: Edge
    Model: Model
    Node: Node
    TaskNode: TaskNode
    WeigtedEdge: WeigtedEdge
}

export class WorkflowAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['ActivityNode', 'Category', 'Edge', 'Model', 'Node', 'TaskNode', 'WeigtedEdge'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ActivityNode:
            case Category:
            case TaskNode: {
                return this.isSubtype(Node, supertype);
            }
            case WeigtedEdge: {
                return this.isSubtype(Edge, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Edge:source':
            case 'Edge:target':
            case 'WeigtedEdge:source':
            case 'WeigtedEdge:target':
            case 'WeigtedEdge:source':
            case 'WeigtedEdge:target': {
                return Node;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Category': {
                return {
                    name: 'Category',
                    mandatory: [
                        { name: 'children', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'edges', type: 'array' },
                        { name: 'nodes', type: 'array' }
                    ]
                };
            }
            case 'TaskNode': {
                return {
                    name: 'TaskNode',
                    mandatory: [
                        { name: 'expanded', type: 'boolean' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new WorkflowAstReflection();
