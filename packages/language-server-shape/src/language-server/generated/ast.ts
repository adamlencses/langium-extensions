/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Shape = Circle | Rectangle;

export const Shape = 'Shape';

export function isShape(item: unknown): item is Shape {
    return reflection.isInstance(item, Shape);
}

export interface Circle extends AstNode {
    readonly $container: Model;
    readonly $type: 'Circle';
    color: string
    height?: number
    name: string
    width?: number
    x?: number
    y?: number
}

export const Circle = 'Circle';

export function isCircle(item: unknown): item is Circle {
    return reflection.isInstance(item, Circle);
}

export interface Connection extends AstNode {
    readonly $container: Model;
    readonly $type: 'Connection';
    source: Reference<Shape>
    target: Reference<Shape>
}

export const Connection = 'Connection';

export function isConnection(item: unknown): item is Connection {
    return reflection.isInstance(item, Connection);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    connections: Array<Connection>
    shapes: Array<Shape>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Rectangle extends AstNode {
    readonly $container: Model;
    readonly $type: 'Rectangle';
    color: string
    height?: number
    name: string
    width?: number
    x?: number
    y?: number
}

export const Rectangle = 'Rectangle';

export function isRectangle(item: unknown): item is Rectangle {
    return reflection.isInstance(item, Rectangle);
}

export interface ShapeAstType {
    Circle: Circle
    Connection: Connection
    Model: Model
    Rectangle: Rectangle
    Shape: Shape
}

export class ShapeAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Circle', 'Connection', 'Model', 'Rectangle', 'Shape'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Circle:
            case Rectangle: {
                return this.isSubtype(Shape, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Connection:source':
            case 'Connection:target': {
                return Shape;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'connections', type: 'array' },
                        { name: 'shapes', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new ShapeAstReflection();
